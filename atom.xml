<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Pengisgood]]></title>
  <subtitle><![CDATA[Better late than never]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://pengisgood.github.io/"/>
  <updated>2016-02-02T16:53:51.000Z</updated>
  <id>http://pengisgood.github.io/</id>
  
  <author>
    <name><![CDATA[Peng Hongwei]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[多个 ng-app 中 Controllers & Services 之间的通信]]></title>
    <link href="http://pengisgood.github.io/2016/01/31/communication-between-multiple-angular-apps/"/>
    <id>http://pengisgood.github.io/2016/01/31/communication-between-multiple-angular-apps/</id>
    <published>2016-01-31T14:15:32.000Z</published>
    <updated>2016-02-02T16:53:51.000Z</updated>
    <content type="html"><![CDATA[<p>通常情况下，在 Angular 的单页面应用中不同的 Controller 或者 Service 之间通信是一件非常容易的事情，因为 Angular 已经给我们提供了一些便利的方法：<code>$on</code>，<code>$emit</code>，<code>$broadcast</code>。</p>
<p>在这里用一个简单的例子来演示一下这三个方法的用途，完整版代码也可以<a href="https://plnkr.co/edit/aOHDVE" target="_blank" rel="external">参考这里</a>：<br><a id="more"></a><br><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#eee</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="id">#child</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> red</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="id">#grandChild</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> yellow</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="id">#sibling</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> pink</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.level</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> solid <span class="number">1px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">5px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">5px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span> <span class="attribute">ng-controller</span>=<span class="value">"ParentCtrl"</span> <span class="attribute">class</span>=<span class="value">'level'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Parent<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"broadcastMsg()"</span>&gt;</span>Broadcast msg<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"emitMsg()"</span>&gt;</span>Emit msg<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">pre</span>&gt;</span>Message from: &#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">'child'</span> <span class="attribute">ng-controller</span>=<span class="value">"ChildCtrl"</span> <span class="attribute">class</span>=<span class="value">'level'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Child<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"broadcastMsg()"</span>&gt;</span>Broadcast msg<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"emitMsg()"</span>&gt;</span>Emit msg<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">pre</span>&gt;</span>Message from: &#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">'grandChild'</span> <span class="attribute">ng-controller</span>=<span class="value">"GrandChildCtrl"</span> <span class="attribute">class</span>=<span class="value">'level'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Grand child<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">pre</span>&gt;</span>Message from: &#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">'sibling'</span> <span class="attribute">ng-controller</span>=<span class="value">"SiblingCtrl"</span> <span class="attribute">class</span>=<span class="value">'level'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Sibling<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"broadcastMsg()"</span>&gt;</span>Broadcast msg<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"emitMsg()"</span>&gt;</span>Emit msg<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">pre</span>&gt;</span>Message from: &#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, [])</span><br><span class="line">app.controller(<span class="string">'ParentCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">  $scope.message = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  $scope.broadcastMsg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.$broadcast(<span class="string">'msg_triggered'</span>,<span class="string">'parent'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.emitMsg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.$emit(<span class="string">'msg_triggered'</span>,<span class="string">'parent'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.$on(<span class="string">'msg_triggered'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, from</span>)</span>&#123;</span><br><span class="line">    $scope.message = from</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.controller(<span class="string">'ChildCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">  $scope.message = <span class="string">''</span></span><br><span class="line">  $scope.broadcastMsg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.$broadcast(<span class="string">'msg_triggered'</span>,<span class="string">'child'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.emitMsg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.$emit(<span class="string">'msg_triggered'</span>,<span class="string">'child'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.$on(<span class="string">'msg_triggered'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, from</span>)</span>&#123;</span><br><span class="line">    $scope.message = from</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.controller(<span class="string">'GrandChildCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">  $scope.message = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  $scope.$on(<span class="string">'msg_triggered'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, from</span>)</span>&#123;</span><br><span class="line">    $scope.message = from</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.controller(<span class="string">'SiblingCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">  $scope.message = <span class="string">''</span></span><br><span class="line">  $scope.broadcastMsg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.$broadcast(<span class="string">'msg_triggered'</span>,<span class="string">'sibling'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.emitMsg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.$emit(<span class="string">'msg_triggered'</span>,<span class="string">'sibling'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.$on(<span class="string">'msg_triggered'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, from</span>)</span>&#123;</span><br><span class="line">    $scope.message = from</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在上面的例子中我们可以看出，利用 Angular 已有的一些 API 能够很方便的在不同 Controller 之间通信，仅需要广播事件即可。</p>
<p>上面的代码之所以能工作，是因为我们一直都有着一个前提，那就是这些 Controller 都在同一个 ng-app 中。那么，如果在一个页面中存在多个 ng-app 呢？（尽管并不推荐这样做，但是在真实的项目中，尤其是在一些遗留项目中，仍然会遇到这种场景。）</p>
<p>先看一个简单的例子：<br><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.app-container</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> white</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">pre</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"app-container"</span> <span class="attribute">ng-app</span>=<span class="value">"app1"</span> <span class="attribute">id</span>=<span class="value">"app1"</span>  <span class="attribute">ng-controller</span>=<span class="value">"ACtrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>App1<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">pre</span> <span class="attribute">ng-bind</span>=<span class="value">"count"</span>&gt;</span><span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"increase()"</span>&gt;</span>Increase<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"app-container"</span> <span class="attribute">ng-app</span>=<span class="value">"app2"</span> <span class="attribute">id</span>=<span class="value">"app2"</span>  <span class="attribute">ng-controller</span>=<span class="value">"BCtrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>App2<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">pre</span> <span class="attribute">ng-bind</span>=<span class="value">"count"</span>&gt;</span><span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"increase()"</span>&gt;</span>Increase<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">angular</span><br><span class="line">  .module(<span class="string">'app1'</span>, [])</span><br><span class="line">  .controller(<span class="string">'ACtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    $scope.increase = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $scope.count += <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">angular</span><br><span class="line">  .module(<span class="string">'app2'</span>, [])</span><br><span class="line">  .controller(<span class="string">'BCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    $scope.increase = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $scope.count += <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Angular__u7684_u542F_u52A8_u65B9_u5F0F"><a href="#Angular__u7684_u542F_u52A8_u65B9_u5F0F" class="headerlink" title="Angular 的启动方式"></a>Angular 的启动方式</h2><p>直接运行这段代码，我们会发现第二个 ng-app 并没有工作，或者说第二个 ng-app 并没有自动启动。为什么会这样呢？相信对 Angular 了解比较多的人会马上给出答案，那就是 Angular 只会自动启动找到的第一个 ng-app，后面其他的 ng-app 没有机会自动启动。</p>
<p>如何解决这个问题呢？我们可以手动启动后面没有启动的ng-app。举个例子：<br><figure class="highlight html"><figcaption><span>hello_world.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"MyController"</span>&gt;</span></span><br><span class="line">    Hello &#123;&#123;greetMe&#125;&#125;!</span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://code.angularjs.org/snapshot/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    angular.module(<span class="string">'myApp'</span>, [])</span><br><span class="line">      .controller(<span class="string">'MyController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">        $scope.greetMe = <span class="string">'World'</span>;</span><br><span class="line">      &#125;]);</span><br><span class="line"></span><br><span class="line">    angular.element(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      angular.bootstrap(<span class="built_in">document</span>, [<span class="string">'myApp'</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>手动启动需要注意两点：一是当使用手动启动方式时，DOM 中不能再使用 ng-app 指令；二是手动启动不会凭空创建不存在的 module，因此需要先加载 module 相关的代码，再调用<code>angular.bootstrap</code>方法。如果你对 Angular 的启动方式还是不太明白的话，请参考<a href="https://code.angularjs.org/1.4.9/docs/guide/bootstrap" target="_blank" rel="external">官方文档</a>。</p>
<p>现在关于Angular 启动的问题解决了，可能有的人会问，如果我的页面中在不同的地方有很多需要手动启动的 ng-app 怎么办呢？难道我要一遍一遍的去调用<code>angualar.bootstrap</code>吗？这样的代码看上去总觉得哪里不对，重复的代码太多了，因此我们需要重构一下。这里重构的方式可能多种多样，我们采用的方式是这样的：<br><figure class="highlight javascript"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'[data-angular-app]'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>)</span><br><span class="line">    angular.bootstrap($<span class="keyword">this</span>, [$<span class="keyword">this</span>.attr(<span class="string">'data-angular-app'</span>]))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>先将代码中所有的 ng-app 改为 data-angular-app，然后在 document ready 的时候用 jQuery 去解析 DOM 上所有的<code>data-angular-app</code>属性，拿到 ng-app 的值，最后用手动启动的方式启动 Angular。</p>
<h2 id="Mini_Pub-Sub"><a href="#Mini_Pub-Sub" class="headerlink" title="Mini Pub-Sub"></a>Mini Pub-Sub</h2><p>趟过了一个坑，我们再回到另一个问题上，如何才能在多个 ng-app 中通信呢？毕竟它们都已经不在相同的 context 中了。这里需要说明一下，在 Angular 中 ng-app 在 DOM 结构上是不能有嵌套关系的。每个 ng-app 都有自己的 rootScope，我们不能再直接使用 Angular 自己提供的一些 API 了。因为不管是 <code>$broadcast</code> 还是<code>$emit</code>，它们都不能跨越不同的 ng-app。相信了解发布订阅机制的人（尤其是做过 WinForm 程序的人）能够很快想到一种可行的解决方案，那就是我们自己实现一个简易的发布订阅机制，然后通过发布订阅自定义的事件在不同的 ng-app 中通信。</p>
<p>听起来感觉很简单，实际上做起来也很简单。<code>Talk is cheap, show me the code.</code></p>
<p>首先我们需要一个管理事件的地方，详细的解释[参考 StackOverflow 上的这个帖(<a href="http://stackoverflow.com/a/2969692/3049524)。" target="_blank" rel="external">http://stackoverflow.com/a/2969692/3049524)。</a><br><figure class="highlight javascript"><figcaption><span>event_manager.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> eventManager = $(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  $.subscribe = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    eventManager.bind.apply(eventManager, fn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.publish = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    eventManager.trigger.apply(eventManager, fn)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(jQuery)</span><br></pre></td></tr></table></figure></p>
<p>暂时只实现了两个 API，一个<code>subscribe</code>用于订阅事件，<code>publish</code>用于发布事件。</p>
<p>订阅事件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.subscribe(<span class="string">'user_rank_changed'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, data</span>)</span>&#123;</span><br><span class="line">  $timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>发布事件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.publish(<span class="string">'user_rank_changed'</span>, &#123;<span class="comment">/*some data*/</span>&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这里用了一个小 trick，因为我们的事件发布订阅都是采用的 jQuery 方式，为了让 Angular 能够感知到 scope 上数据的变化，我们将整个回调函数包在了<code>$timeout</code>中，由 JavaScript 自己放到时间循环中去等到空闲的时候开始执行，而不是使用<code>$scope.$apply()</code>方法，是因为有些时候直接调用该方法会给我们带来另一个<code>Error: $digest already in progress</code>的错误。虽然也可以用<code>$rootScope.$$phase || $rootScope.$apply();</code>这种方式来规避，但是个人认为还是略显 tricky，没有<code>$timeout</code> 的方式优雅。</p>
<p>因为我们用的是原生的 JavaScript 的事件机制，所以即使我们的 Controller 或者 Service 处于不同的 ng-app 中，我们也能够轻松地相互传输数据了。</p>
<h2 id="u6539_u8FDB_u539F_u5219"><a href="#u6539_u8FDB_u539F_u5219" class="headerlink" title="改进原则"></a>改进原则</h2><p>在Angular 的单页面应用中，我们尽量一个应用只有一个 ng-app，然后通过 Module 对业务进行模块划分，而不是 ng-app。不到万不得已，不要和 jQuery 混着用，总是使用 Angular 的思维方式进行开发，否则一不小心就会掉进数据不同步的坑中。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>通常情况下，在 Angular 的单页面应用中不同的 Controller 或者 Service 之间通信是一件非常容易的事情，因为 Angular 已经给我们提供了一些便利的方法：<code>$on</code>，<code>$emit</code>，<code>$broadcast</code>。</p>
<p>在这里用一个简单的例子来演示一下这三个方法的用途，完整版代码也可以<a href="https://plnkr.co/edit/aOHDVE">参考这里</a>：<br>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://pengisgood.github.io/tags/AngularJS/"/>
    
      <category term="JavaScript" scheme="http://pengisgood.github.io/tags/JavaScript/"/>
    
      <category term="Web 前端" scheme="http://pengisgood.github.io/categories/Web-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[译]成为 JavaScript 忍者]]></title>
    <link href="http://pengisgood.github.io/2016/01/16/becoming-a-javascript-ninja/"/>
    <id>http://pengisgood.github.io/2016/01/16/becoming-a-javascript-ninja/</id>
    <published>2016-01-16T02:13:29.000Z</published>
    <updated>2016-01-31T14:35:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="http://blog.wolksoftware.com/becoming-a-javascript-ninja" target="_blank" rel="external">http://blog.wolksoftware.com/becoming-a-javascript-ninja</a></p>
</blockquote>
<p>我努力地训练着想成为大家所说的“JavaScript 忍者”。在这篇文章中我将会分享一些迄今为止我学到的比较重要的东西。</p>
<p><img src="/../imgs/ninja.jpg" alt=""></p>
<h2 id="1-__u4F7F_u7528_u4EE3_u7801_u7EA6_u5B9A"><a href="#1-__u4F7F_u7528_u4EE3_u7801_u7EA6_u5B9A" class="headerlink" title="1. 使用代码约定"></a>1. 使用代码约定</h2><p>代码约定是针对一门特定编程语言的编程规范、实践和方法等一系列指导方针的集合。这些约定通常包含文件组织，缩进，注释，定义，声明，空格，命名，编程实践，编程原则，编程经验法则，架构的最佳实践等。这些是软件结构质量的指导方针。为了帮助提高代码的可读性和软件的可维护性，强烈建议软件开发工程师遵循这些指导方针。</p>
<a id="more"></a>
<p>有一些工具可以帮助你确保你的团队遵循 JavaScript 的代码约定：</p>
<table>
<thead>
<tr>
<th style="text-align:center">代码约定工具</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">JSLint</td>
<td style="text-align:left">JSLint 是一个用于查找 JavaScript 程序问题的 JavaScript 程序。它是由 Douglas Crockford 开发的一个代码质量工具。JSLint 会扫描 JavaScript 源码。如果发现问题，它会返回描述问题的信息和在源码中的大概位置。该问题不一定是语法错误，尽管经常确实是。JSLint 也会做一些代码风格和结构的检查。它并不证明你的程序是正确的。它只是从另一个角度帮助发现问题。可以从<a href="/www.jslint.com">这里</a>下载 JSLint。</td>
</tr>
<tr>
<td style="text-align:center">JSHint</td>
<td style="text-align:left">JSHint 是 Anton Kovalyov 从 JSLint 创建的一个分支，因为他相信代码质量工具应该是社区驱动的并且有时候由我们自己决定是否要遵循一些代码约定。因此 JSHint 比 JSLint 更具有可配置性。可以从<a href="/www.jshint.com">这里</a>下载 JSHint。</td>
</tr>
</tbody>
</table>
<h2 id="2-__u4E3A_u4EE3_u7801_u7F16_u5199_u6587_u6863"><a href="#2-__u4E3A_u4EE3_u7801_u7F16_u5199_u6587_u6863" class="headerlink" title="2. 为代码编写文档"></a>2. 为代码编写文档</h2><p>我确信你会很不赖烦的听到别人说你需要为你的代码编写文档。我确信你正在这样做但是有时候不容易发现它的价值，但是如果你创建的注释最终可以形成类似MSDN 或者 Java 文档这样的文档站点，似乎有更多的价值。幸运的是，我们也有帮助我们生成文档的工具：</p>
<table>
<thead>
<tr>
<th style="text-align:center">文档生成工具</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">JsDoc Toolkit</td>
<td style="text-align:left">它是用 JavaScript 编写的一个应用程序，用于根据 JavaScript 源码中的注释自动生成通过模板格式化的多页面的 HTML（或者 XML， JSON，或者其他基于文本文件的）文档。你可以从<a href="http://usejsdoc.org/" target="_blank" rel="external">这里</a>下载 JsDoc Toolkit。</td>
</tr>
</tbody>
</table>
<h2 id="3-__u5206_u79BB_u5173_u6CE8_u70B9"><a href="#3-__u5206_u79BB_u5173_u6CE8_u70B9" class="headerlink" title="3. 分离关注点"></a>3. 分离关注点</h2><p>在计算机科学中，关注点分离（SoC）将计算机程序分开到不同部分中的设计原则，像这样每一个部分表示一个单独的关注点。一个关注点就是一些会影响到计算机程序代码的信息。</p>
<p>分离关注点的价值在于简化计算机程序的开发和维护。当关注点很好的分离之后，每一个部分都能独立开发和更新了。还有一个特别的价值就是它赋予了你在以后的改善或修改一个部分的代码的时候不用关心其他部分的细节，并且不用修改其他部分的能力。</p>
<p>在 JavaScript 应用程序中，你的关注点就是 HTML，CSS，JavaScript 配置代码和 JavaScript 逻辑代码。为了将它们保持分离，你只需要坚持下面几个法则：</p>
<p><strong> a) 从 JavaScript 代码中移除 HTML：在 JavaScript 中嵌入 HTML 字符串是一种坏的实践。 </strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">div.innerHTML = <span class="string">"&lt;h3&gt;Error&lt;/h3&gt;&lt;p&gt;Invalid email adress.&lt;/p&gt;"</span>;</span><br></pre></td></tr></table></figure>
<p>解决这个问题的最佳方式就是通过 AJAX 从服务端加载 HTML 或者甚至从服务端加载客户端模板。有一些像 <code>handlebars.js</code> 的工具可以帮助你在客户端生成 HTML 的问题，而且不用将 HTML 字符串嵌入到 JavaScript 中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染逻辑</span></span><br><span class="line">RenderJson = <span class="function"><span class="keyword">function</span>(<span class="params">json, template, container</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> compiledTemplate = Handlebars.compile(template);</span><br><span class="line">    <span class="keyword">var</span> html = compiledTemplate(json);</span><br><span class="line">    $(container).html(<span class="string">''</span>);</span><br><span class="line">    $(container).html(html);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板</span></span><br><span class="line"><span class="keyword">var</span> template = <span class="string">"&#123;&#123;#each hero&#125;&#125;&lt;tr&gt;&lt;td&gt;&#123;&#123;this.name&#125;&#125;"</span> +</span><br><span class="line">    <span class="string">"&lt;td&gt;&lt;/tr&gt;&#123;&#123;/each&#125;&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// model</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">    hero : [</span><br><span class="line">        &#123; name : <span class="string">'Batman'</span> &#125;,</span><br><span class="line">        &#123; name : <span class="string">'Superman'</span> &#125;,</span><br><span class="line">        &#123; name : <span class="string">'Spiderman'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用渲染逻辑</span></span><br><span class="line">RenderJson(json, template, $(<span class="string">'#heroes_tbody'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// DOM where we will insert HTML on rendering</span></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">thead</span>&gt;</span><span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">th</span>&gt;</span>Hero<span class="tag">&lt;/<span class="title">th</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span><span class="tag">&lt;/<span class="title">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tbody</span> <span class="attribute">id</span>=<span class="value">"heroes_tbody"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JS 添加的行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong> b) 将 CSS 从 JavaScript 中移除 </strong></p>
<p>请勿通过 JavaScript 修改 CSS 的属性，尽量只通过 CSS 的类。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).css( <span class="string">"color"</span>, <span class="string">"red"</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).addClass(<span class="string">'redFont'</span>);</span><br></pre></td></tr></table></figure>
<p><strong> c) 从 CSS 中移除 JavaScript </strong></p>
<p>如果你不了解 CSS 表达式，不要使用 CSS 表达式（一个 IE8 早期的特性），以免误入歧途。</p>
<p><strong> d) 从 HTML 中移除 CSS </strong></p>
<p>总是使用<code>class</code>，而不是通过<code>style</code>标签添加样式。</p>
<p><strong> e) 从逻辑代码中移除配置代码 </strong></p>
<p>尽量把所有的硬编码变量和常量放到一个配置对象中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CONFIG = &#123;</span><br><span class="line">    MESSAGE : &#123;</span><br><span class="line">        SUCCESS :<span class="string">"Success!"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    DOM : &#123;</span><br><span class="line">        HEROE_LIST : <span class="string">"#heroes_tbody"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">RenderJson(json, template, $(<span class="string">'#heroes_tbody'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">RenderJson(json, template, $(CONFIG.DOM.HEROE_LIST));</span><br></pre></td></tr></table></figure>
<p>如果这样做你会发现找到问题的根源会更加容易些，想象一个场景，背景颜色不对，如果你知道不会有 JavaScript 或者 HTML 涉及到你的 CSS，你自然而然就知道问题肯定处在某一个 CSS 文件中，你只需要找到那个影响到样式的 CSS <code>Class</code>，然后就完成了。</p>
<h2 id="4-__u907F_u514D_u5168_u5C40_u53D8_u91CF"><a href="#4-__u907F_u514D_u5168_u5C40_u53D8_u91CF" class="headerlink" title="4. 避免全局变量"></a>4. 避免全局变量</h2><p>在计算机编程中，全局变量指的是在所有作用域中都能访问的变量。全局变量是一种不好的实践，因为它会导致一些问题，比如一个已经存在的方法和全局变量的覆盖，当我们不知道变量在哪里被定义的时候，代码就变得很难理解和维护了。好的 JavaScript 代码就是没有定义全局变量的。有一些技术可以帮助你让所有的事情都保持在本地：</p>
<p>为了避免全局变量，第一件事情就是要确保所有的代码都被包在函数中。最简单的办法就是把所有的代码都直接放到一个函数中去：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>) </span>&#123;</span><br><span class="line"><span class="pi">    "use strict"</span>; <span class="comment">// 进一步避免创建全局变量</span></span><br><span class="line">    <span class="keyword">var</span> doc = <span class="built_in">window</span>.document;</span><br><span class="line">    <span class="comment">// 在这里声明你的变量</span></span><br><span class="line">    <span class="comment">// 一些其他的代码</span></span><br><span class="line">&#125;(<span class="built_in">window</span>));</span><br></pre></td></tr></table></figure></p>
<p>最常用的避免全局变量的方式就是只为应用程序创建唯一的全局变量，像 Jquery中的 <code>$</code>。然后你可以使用一种技术叫做命名空间 <code>namespacing</code>。命名空间就是在同一全局作用域下对函数从逻辑上进行分组。</p>
<p>有时候每一个 JavaScript 文件都会添加一个自己的命名空间，在这种情况下，需要确保命名空间已经存在了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyApp = &#123;</span><br><span class="line">    namespace: <span class="function"><span class="keyword">function</span>(<span class="params">ns</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> parts = ns.split(<span class="string">"."</span>),</span><br><span class="line">            object = <span class="keyword">this</span>, i, len;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>, len = parts.lenght; i &lt; len; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!object[parts[i]]) &#123;</span><br><span class="line">                object[parts[i]] = &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            object = object[parts[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义命名空间</span></span><br><span class="line">MyApp.namespace(<span class="string">"Helpers.Parsing"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你现在可以使用该命名空间了</span></span><br><span class="line">MyApp.Helpers.Parsing.DateParser = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做一些事情</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>另一项开发者用来避免全局变量的技术就是封装到模块 <code>Module</code> 中。一个模块就是不需要创建新的全局变量或者命名空间的通用的功能。不要将所有的代码都放一个负责执行任务或者发布接口的函数中。最常见的 JavaScript 模块类型就是异步模块定义 <code>Asynchronous Module Definition (AMD)</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line">define( <span class="string">"parsing"</span>, <span class="comment">//模块名字</span></span><br><span class="line">        [ <span class="string">"dependency1"</span>, <span class="string">"dependency2"</span> ], <span class="comment">// 模块依赖</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"> dependency1, dependency2</span>) </span>&#123; <span class="comment">//工厂方法</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Instead of creating a namespace AMD modules</span></span><br><span class="line">            <span class="comment">// are expected to return their public interface</span></span><br><span class="line">            <span class="keyword">var</span> Parsing = &#123;&#125;;</span><br><span class="line">            Parsing.DateParser = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="comment">//do something</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> Parsing;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Require.js 加载模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">"parsing"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">Parsing</span>) </span>&#123;</span><br><span class="line">    Parsing.DateParser(); <span class="comment">// 使用模块</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="5-__u907F_u514D_Null__u6BD4_u8F83"><a href="#5-__u907F_u514D_Null__u6BD4_u8F83" class="headerlink" title="5. 避免 Null 比较"></a>5. 避免 Null 比较</h2><p>特殊值 <code>null</code> 经常被错误理解并且和 <code>undefined</code> 混淆。这个值应该只能出现在一下几个场景：</p>
<p><strong> a) 初始化一个可能后面会被赋值的对象 </strong></p>
<p><strong> b) 和已经被初始化的但不确定是否赋过值的变量比较 </strong></p>
<p><strong> c) 作为参数传入一个期待参数为对象的函数 </strong></p>
<p><strong> d) 作为一个期待返回对象的函数的返回值 </strong></p>
<p>有一些场景是不应该使用 <code>null</code>的：</p>
<p><strong> a) 测试是否有传入参数 </strong></p>
<p><strong> b) 测试一个未初始化的变量值是否为 <code>null</code> </strong></p>
<p>特殊值 <code>undefined</code> 经常和 <code>null</code> 混为一谈。部分混淆来自于 <code>null == undefined</code> 的值为 <code>true</code>。然而，这两个值的用途却不同。未被初始化的变量的默认值为 <code>undefined</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">var</span> person;</span><br><span class="line"><span class="built_in">console</span>.log(person == <span class="literal">undefined</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>一般性的建议就是要避免总是使用 <code>undefined</code>。</p>
<p>我猜想你一定好奇如何不使用 <code>undefined</code> 和 <code>null</code> 来做下面这件事情？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arg != <span class="literal">null</span>) &#123;</span><br><span class="line">        soSomethingElse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>比较一个变量和 <code>null</code> 不会给你足够的信息判断是否可以安全的进行。幸运的是，JavaScript 提供了一些方法帮助你决定一个变量的真实的值：</p>
<p><strong> a) 基本值：如果你期待一个值的类型是基本类型（string，number，boolean），那么 <code>typeof</code> 操作符就是最佳选择。 </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// detect a number</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> count === <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> b) 引用值：<code>instanceof</code> 操作符是检测一个对象是否为特定类型的最佳方式。 </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// detect a date</span></span><br><span class="line"><span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> c) 函数：<code>typeof</code> 操作符是检测函数的最佳方式。 </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// detect a function</span></span><br><span class="line"><span class="keyword">if</span>(MyApp.Helpers.Parsing.DateParser <span class="keyword">typeof</span> === <span class="string">"function"</span>) &#123;</span><br><span class="line">    MyApp.Helpers.Parsing.DateParser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> d) 数组：最佳方式是使用 <code>isArray()</code> 函数。唯一的问题是旧版本的 IE 不支持 <code>isArray</code>，但是你可以用下面的代码来支持多浏览器。 </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.isArray === <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">"[object array]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>e) 属性：<code>hasOwnProperty()</code> 函数是检测属性的最佳方式。 **<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hero = &#123; name : <span class="string">'superman '</span>&#125;;</span><br><span class="line"><span class="comment">//chech property</span></span><br><span class="line"><span class="keyword">if</span> (name <span class="keyword">in</span> hero) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//chech NOT inherited property</span></span><br><span class="line"><span class="keyword">if</span> (hero.hasOwnProperty(<span class="string">'name'</span>)) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="6-__u5904_u7406_u9519_u8BEF"><a href="#6-__u5904_u7406_u9519_u8BEF" class="headerlink" title="6. 处理错误"></a>6. 处理错误</h2><p>在 JavaScript 中抛自定义的错误可以帮助你减少调试的时间。不是那么容易得出何时应该抛自定义的错误，但是常规错误一般只有在应用程序最深层才抛。任何处理特定应用逻辑的代码应该有处理错误的能力。你可以用下面的代码创建自定义的错误：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyError</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line">MyError.prototype = <span class="keyword">new</span> <span class="built_in">Error</span>(); <span class="comment">//extending base error class</span></span><br></pre></td></tr></table></figure></p>
<p>检查特定的错误类型也是个好主意（Error，EvalError，RangeError，ReferenceError，SyntaxError，TypeError，URIError）使得错误处理更加健壮：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> <span class="built_in">TypeError</span>) &#123;</span><br><span class="line">        <span class="comment">// Handle error</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> <span class="built_in">ReferenceError</span>) &#123;</span><br><span class="line">        <span class="comment">// Handle error</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//Handle all others</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="7-__u4E0D_u8981_u4FEE_u6539_u4E0D_u5C5E_u4E8E_u4F60_u7684_u5BF9_u8C61"><a href="#7-__u4E0D_u8981_u4FEE_u6539_u4E0D_u5C5E_u4E8E_u4F60_u7684_u5BF9_u8C61" class="headerlink" title="7. 不要修改不属于你的对象"></a>7. 不要修改不属于你的对象</h2><p>有一些东西是不属于你的（不是你自己或者团队写创建的）：</p>
<p><strong> a) Native 对象 </strong> （e.g. Object，Array，etc.）</p>
<p><strong> b) DOM 对象 </strong> （e.g. document）</p>
<p><strong> c) 浏览器对象 </strong> （e.g. window）</p>
<p><strong> d) 库对象 </strong> （e.g. Jquery，$，_，Handlebars，etc.）</p>
<p>有一些事情是你不能在不属于你的对象上做的：</p>
<p><strong> a) 不要复写方法 </strong></p>
<p><strong> b) 不要添加新方法 </strong></p>
<p><strong> c) 不要删除已经存在的方法 </strong></p>
<p>如果你确实需要扩展或者修改不属于你的对象，你应该创建一个类并继承它然后修改你的新类。你可以使用 JavaScript 的一种继承方式：</p>
<p><strong> a) 基于对象的继承： </strong> 通过调用构造函数继承。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">"Bob"</span>,</span><br><span class="line">    sayName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myPerson = <span class="built_in">Object</span>.create(person);</span><br><span class="line">myPerson.sayName(); <span class="comment">// Will display "Bob"</span></span><br></pre></td></tr></table></figure></p>
<p><strong> b) 基于类型的继承： </strong> 一般需要两步：先原型继承然后构造函数继承。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>,name); <span class="comment">// constructor inheritance</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Author.prototype = <span class="keyword">new</span> Person(); <span class="comment">// prototypal inheritance</span></span><br></pre></td></tr></table></figure></p>
<h2 id="8-__u6D4B_u8BD5_u4E00_u5207_u4E8B_u60C5"><a href="#8-__u6D4B_u8BD5_u4E00_u5207_u4E8B_u60C5" class="headerlink" title="8. 测试一切事情"></a>8. 测试一切事情</h2><p>随着 JavaScript 应用复杂度的增长，我们应该引入和服务端或者桌面端应用使用了多年的一样的设计模式和实践，以帮助我们保证高质量的解决方案。所以是时候开始为你的 JavaScript 代码写测试了（单元测试，性能测试，集成测试……）。好消息是有一些工具可以帮助我们做这些：</p>
<p>a) Jasmine</p>
<p>b) JsTestDriver</p>
<p>c) PhantomJS</p>
<p>d) QUnit</p>
<p>e) Selenium</p>
<p>f) Yeti</p>
<p>g) YUI Test</p>
<h2 id="9-__u81EA_u52A8_u5316_u4E00_u5207_u4E8B_u60C5"><a href="#9-__u81EA_u52A8_u5316_u4E00_u5207_u4E8B_u60C5" class="headerlink" title="9. 自动化一切事情"></a>9. 自动化一切事情</h2><p>持续集成是一项软件开发实践，多个团队经常集成他们的工作，通常每个人每人至少一次——以至于每天会有多次集成。每一次集成都会通过自动化构建（包括测试）尽早检查发现错误。许多团队发现这种方式可以显著地减少集成问题并且帮助团队快速地开发出内聚的软件。</p>
<p>持续集成不能避免 <code>bug</code>，但是它会帮助你更容易发现并且干掉 <code>bug</code>。在这方面它更像是自测试代码。如果你引入了一个 <code>bug</code>，快速地发现它，更加容易避免它。</p>
<p>持续集成已经和 <code>TDD（测试驱动开发）</code> 一起用了一段时间了。但是它过去总是传统的和服务端代码联系在一起。在前面的建议中我们说到是时候为我们的 JavaScript 代码写测试了。在这个建议中我想强调也是时候去持续集成它了。</p>
<p><strong> 构建 </strong></p>
<p>在专业的开发环境中你通常会发现以下几种构建：</p>
<p><strong> a) 开发构建：</strong> 由开发者在工作的时候运行，为了不中断生产率它应该尽可能快。</p>
<p><strong> b) 集成构建：</strong> 会定期运行的自动化构建。可能会在每次提交之后运行一遍，但是一般在大型项目中他们倾向于每个几分钟运行一遍。</p>
<p><strong> c) 发布构建：</strong> 在部署到产品环境之前按需运行的构建。</p>
<p><strong> 持续集成 </strong></p>
<p>有很多做持续集成的服务器但是 <code>Jenkins</code> 是其中最流行的一个，最流行的构建工具是 <code>Apache Ant</code>（译者注：现在像 Maven，Gradle 远比 Ant 流行）。构建你的 JavaScript 代码包括以下几个任务：</p>
<p><strong> a) Test automation </strong> 根据第8点中的讨论，你应该使用自动化工具帮助你测试你的 JavaScript 代码。</p>
<p><strong> b) Validation </strong> 你应该在你的构建过程中添加代码质量的验证。可以使用像 JSLint 或者 JSHint 这样的工具。</p>
<p><strong> c) Concatenation </strong> 你应该把所有的 JavaScript 文件连接成为一个单独的文件。</p>
<p><strong> d) Baking </strong> 你应该让添加 License 或者 Version 的任务作构建的一部分。</p>
<p><strong> e) Minification </strong> 你应该使用像 <code>uglify.js</code> 的工具让 Minify 成为集成的一部分。</p>
<p><strong> f) Compression </strong> 你应该让 Gzip JavaScript 代码成为够的一部分。</p>
<p><strong> g) Documentation </strong> 你应该使用像 JS Doc Toolkit 这样的工具让自动生成文档作为集成的一部分。</p>
<h2 id="10-__u627E_u4E00_u4F4D_u5927_u5E08"><a href="#10-__u627E_u4E00_u4F4D_u5927_u5E08" class="headerlink" title="10. 找一位大师"></a>10. 找一位大师</h2><p>一个真正的忍者从来没有停止过学习，所以你最好找一位大师！</p>
<p><img src="/../imgs/master.jpg" alt=""></p>
<p>从哪里可以找到一位呢？答案是互联网。我推荐阅读一些 Chrome 或者 Mozilla 的开发者关于 JavaScript 的博客和一些其他像 <code>jquery</code> 的 JS 库。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文链接：<a href="http://blog.wolksoftware.com/becoming-a-javascript-ninja">http://blog.wolksoftware.com/becoming-a-javascript-ninja</a></p>
</blockquote>
<p>我努力地训练着想成为大家所说的“JavaScript 忍者”。在这篇文章中我将会分享一些迄今为止我学到的比较重要的东西。</p>
<p><img src="/../imgs/ninja.jpg" alt=""></p>
<h2 id="1-__u4F7F_u7528_u4EE3_u7801_u7EA6_u5B9A"><a href="#1-__u4F7F_u7528_u4EE3_u7801_u7EA6_u5B9A" class="headerlink" title="1. 使用代码约定"></a>1. 使用代码约定</h2><p>代码约定是针对一门特定编程语言的编程规范、实践和方法等一系列指导方针的集合。这些约定通常包含文件组织，缩进，注释，定义，声明，空格，命名，编程实践，编程原则，编程经验法则，架构的最佳实践等。这些是软件结构质量的指导方针。为了帮助提高代码的可读性和软件的可维护性，强烈建议软件开发工程师遵循这些指导方针。</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://pengisgood.github.io/tags/JavaScript/"/>
    
      <category term="Web 前端" scheme="http://pengisgood.github.io/categories/Web-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://pengisgood.github.io/2016/01/03/hello-world/"/>
    <id>http://pengisgood.github.io/2016/01/03/hello-world/</id>
    <published>2016-01-03T02:13:29.000Z</published>
    <updated>2016-01-19T00:29:28.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>]]>
    
    </summary>
    
  </entry>
  
</feed>
